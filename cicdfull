def COLOR_MAP = [
    'SUCCESS': 'good', 
    'FAILURE': 'danger',
]

pipeline{
		agent any
		stages{
				stage('Fetch Code'){
					steps{
						git branch: 'vp-rem', url: 'https://github.com/devopshydclub/vprofile-project.git'
					}
				}
				stage('Build'){
					steps{
						sh 'mvn install'
					}
				}
                stage('Test'){
                	steps{
                		sh 'mvn test'

                	}
                }
                stage('CheckStyle Analysis'){
                	steps{
                		sh 'mvn checkstyle:checkstyle'
                	}
                }
                stage('Sonar Analysis'){
                	environment{
                		scannerHome = tool 'sonar4.7'
                	}
                		steps{
                			withSonarQubeEnv('sonar'){
                				sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
					                   -Dsonar.projectName=vprofile \
					                   -Dsonar.projectVersion=1.0 \
					                   -Dsonar.sources=src/ \
					                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
					                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
					                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
					                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                			}

                		}
                }
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                		}
                	}
                }
                stage("UploadArtifact"){
            		steps{
                		  nexusArtifactUploader(
		                  nexusVersion: 'nexus3',
		                  protocol: 'http',
		                  nexusUrl: '52.91.143.182:8081',
		                  groupId: 'QA',
		                  version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
		                  repository: 'vprofile-repo',
		                  credentialsId: 'nexus',
		                  artifacts: [
		                    [artifactId: 'navavproapp',
		                     classifier: '',
		                     file: 'target/vprofile-v2.war',
		                     type: 'war']
                  			]
               			 )
           			}
        		}
    }
    post {
        always {
            echo 'Slack Notifications.'
            slackSend channel: '#jenkinscicd',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
        }
    }
		
}
